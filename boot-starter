#!/bin/bash

# shellcheck source=boot-starter.conf

if [ -f ./boot-starter.conf ]; then
    source boot-starter.conf
else
    echo '未找到 boot-starter.conf'
    exit 1
fi

# 打印绿色字，不会自动换行
printGreen() {
    echo -ne "\e[32m$*\e[0m"
}
# 打印红色字
printRed() {
    echo -ne "\e[31m$*\e[0m"
}

# 将参数作为shell执行，执行之前先打印。输出到标准错误流，以避免被$()捕获
exeShell() {
    printGreen "$1\n$2" 1>&2
    local shell
    shell=$(echo -e "$1" | tr -d '\n')
    eval "$shell"
}

# 查询监听在某一端口的程序pid
findPidListenedOnPort() {
    ss -lp sport eq "$1" |
        grep -Eo ',pid=[0-9]{1,7},' |
        grep -Eo '[0-9]+' |
        head -1
}

# 等待某一端口被监听，没有被监听的话，会一直等待下去
waitListenOnPort() {
    while [ ! "$(findPidListenedOnPort $1)" ]; do
        printGreen .
        sleep 1s
    done
}

# 杀死指定进程
killProcess() {
    kill -15 "$1"
}

# 启动 SpringBoot 项目
startBoot() {
    exeShell "$start_shell_prefix$1$start_shell_suffix"
}

# 关闭 SpringBoot 项目
stopBoot() {
    local opid
    opid=$(findPidListenedOnPort "$1")
    if [ "$opid" ]; then
        printRed "等待 $opid 进程关闭。$1 端口\n"
        killProcess "$opid"
    else
        printRed "没有程序监听 $1 端口\n"
    fi
}

# 启动
start() {
    printGreen "项目启动中...\n"
    if [ ! "$use_systemd" ]; then
        startBoot "${ports[$1]}"
    else
        exeShell "$systemd_command start ${systemd_services[$1]}"
    fi
}

# 重启
restart() {
    local opid
    local index
    for ((index = 0; index < ${#ports[@]}; index++)); do
        opid=$(findPidListenedOnPort "${ports[$index]}")
        if [ "$opid" ]; then
            break
        fi
    done
    if [ ! "$opid" ]; then
        index=0
    fi
    if [ ! "$use_systemd" ]; then
        if [ "$opid" ]; then
            stopBoot "${ports[$index]}"
        fi
        startBoot "${ports[$index]}"
    else
        exeShell "$systemd_command restart ${systemd_services[$index]}"
    fi
}

# 关闭
stop() {
    if [ ! "$use_systemd" ]; then
        stopBoot "${ports[0]}"
        stopBoot "${ports[1]}"
    else
        exeShell "$systemd_command stop ${systemd_services[*]}"
    fi
}

# 查看状态
status() {
    local opid
    local checkedPort
    for port in "${ports[@]}"; do
        checkedPort=$port
        opid=$(findPidListenedOnPort "$port")
        if [ "$opid" ]; then
            break
        fi
    done
    if [ "$opid" ]; then
        printGreen "$opid 进程已经监听 $checkedPort 端口\n"
    else
        printGreen "项目没有启动\n"
    fi
}

# 部署时用到
deployer() {
    start "$1"
    printGreen "等待监听 ${ports[$1]} 端口\n"
    waitListenOnPort "$1"
    echo ""
    sleep "$deploy_sleep_time"
    stopBoot "$2"
}

# 部署
deploy() {
    local opid
    opid=$(findPidListenedOnPort "${ports[0]}")
    if [ "$opid" ]; then
        deployer 1 0
    else
        deployer 0 1
    fi
}

# 打印帮助
printHelp() {
    cat <<EOF
boot-starter [deploy|restart|stop|status]

deploy      部署项目，使用两个端口交替
restart     重启项目，重启现已监听端口的项目。没有监听的话，启动第一个
stop        关闭所有项目
status      查看项目状态
EOF
}

# 判断选项
case "$1" in
"deploy")
    deploy
    ;;
"restart")
    restart
    ;;
"stop")
    stop
    ;;
"status")
    status
    ;;
*)
    printHelp
    ;;
esac
